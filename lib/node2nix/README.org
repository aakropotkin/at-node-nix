#+TITLE: Readme

* TODO Use =stdenv.mkDerivation= foreach package.
Currently =node2nix= generates a giant =installPhase= script which aims to
immitate ~npm install~.
** Problems with the existing approach
- There is no ability to cache unpacked ( "NPM installed" ) packages
  across derivations.
  + Only the tarballs themselves, and the final unpacked tree can be cached.
- Because this is written as an =installPhase=, you using conventional phases
  such as =patchPhase= in a derivation "don't do what I expect".
- The recursive descent requires a huge number of filesystem reads which could
  be serialized or ommitted using cached package information.
** Solution
Use =stdenv.mkDerivation= to define each Node.js package as a derivation.
- Use conventional =unpackPhase=, =patchPhase=, =buildPhase=, =installPhase=.
- Use =propagatedBuildInputs= in combination with =setupHook= routines to
  ensure runtime packages are available.
  + Merge large collections of hooks into parent packages as an optimization.
- Take advantage of =NODE_PATH= to avoid copying files when possible.
- Cache =package-lock.json= in outputs.
  + This is bizarre that they didn't do this; it's a huge performance hit.

* TODO Understand =pinpointDependencies= routine.
I think this is used to make =npm= shut up about lock-files.
You might be able to perform "pinpointing" as a "check" style routine once, and
skip it on later invocations if you define your source lists well.

* TODO Parse most JSON files in Nix.
A large number of JavaScript routines are used which only parse JSON files and
perform filesystem reads/writes - these can be done natively in Nix to completely
avoid the creation of spurrious derivations, and greatly improve caching.

* TODO Use NPM/Yarn strictly for resolution.
Because Nix is already handling locks, caches, packing, and unpacking; resolution
is actually the only thing we need those package managers for.
In practice, this is obviously easier said then done; but depending on our usage
we might not really need to add much for Nix to emulate NPM.
